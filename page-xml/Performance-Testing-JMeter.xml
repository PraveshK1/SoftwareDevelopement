<?xml version="1.0" standalone="no"?>
<!DOCTYPE page SYSTEM "../../page.dtd">
<page xmlns:ac="http://www.atlassian.com/schema/confluence/4/ac/" xmlns:ri="http://www.atlassian.com/schema/confluence/4/ri/">
  <space>storage</space>
  <title>Performance Testing JMeter</title>
  <lower-title>performance testing jmeter</lower-title>
  <body><p><strong>JMeter Setup and Usage V1.0</strong></p><p><strong>What is JMeter?</strong></p><p>JMeter is an open-source testing tool that analyzes and measures the performance of software and products.<br />It is used to execute performance testing, load testing, and functional testing of web applications.<br />JMeter can also simulate a heavy load on a server by creating tons of virtual concurrent users to the web server.</p><p><strong>How does JMeter perform testing?</strong></p><p>Let&apos;s have a look at the different steps performed by JMeter during testing:</p><ol start="1"><li><p>It creates a request and sends it to the server.</p></li><li><p>It receives the response from servers, collects them, and visualizes those details in a chart or graph.</p></li><li><p>It processes the response from the server.</p></li><li><p>It generates the test result in several formats such as text, XML, JSON so that the tester can analyze data.</p></li></ol><p><strong>Prerequisites</strong></p><p>JMeter is a pure Java desktop application. It requires a fully compliant JVM 6 or higher. You need to download and install the latest version of Java SE Development Kit.</p><p>The operating systems compatible with JMeter are:</p><ul><li><p>Linux</p></li><li><p>Windows</p></li><li><p>Mac OS</p></li><li><p>Ubuntu</p></li></ul><ol start="1"><li><p><strong>Check if Java is installed</strong></p></li></ol><ul><li><p>Open the command prompt</p></li><li><p>Put the command <code>java -version</code></p></li></ul><p>Example:</p><ac:structured-macro ac:name="code" ac:schema-version="1" ac:macro-id="948d97bb-e7ee-4f60-98ba-fd1b7ba95a33"><ac:plain-text-body><![CDATA[C:\Users\Ashley>java -version
java version "18.0.2.1" 2022-08-18
Java(TM) SE Runtime Environment (build 18.0.2.1+1-18)
Java HotSpot(TM) 64-Bit Server VM (build 18.0.2.1+1-18, mixed mode, sharing)
]]></ac:plain-text-body></ac:structured-macro><p>If you have Java installed in your system, the command will show the version of Java installed. Otherwise, before going forward with the installation of JMeter, you must install Java.</p><p>You can download and install the latest version of Java SE Development Kit. Download Java Platform (JDK).</p><ol start="2"><li><p><strong>Download JMeter</strong></p></li></ol><ul><li><p>To download JMeter, go to the Apache JMeter website.</p></li><li><p>On the website, go to the binaries section and download the zip file.</p></li><li><p>Wait for the zip folder to be downloaded.</p></li></ul><p><strong>Apache JMeter 5.4.1 (Requires Java 8+)</strong></p><p>Binaries</p><ul><li><p>apache-jmeter-5.4.1.zip (pgp, md5, sha1)</p></li><li><p>apache-jmeter-5.4.1.tgz (pgp, md5, sha1)</p></li></ul><ol start="3"><li><p><strong>Install JMeter</strong></p></li></ol><p>Installation of JMeter is extremely easy and simple. You simply unzip the zip/tar file into the directory where you want JMeter to be installed. There is no tedious installation screen to deal with.</p><ul><li><p>Once the zip folder is downloaded, go to the folder location, and then extract the zip folder.</p></li><li><p>Once the folder is extracted, go inside that folder and then go inside the <code>bin</code> folder.</p></li><li><p>If you are using Windows, just run the file <code>/bin/jmeter.bat</code> to start JMeter in GUI mode.</p></li><li><p>If you are using Linux/Mac, navigate to the folder and run the file <code>/bin/jmeter.sh</code> to start JMeter in GUI mode.</p></li></ul><ol start="4"><li><p><strong>Install Plugin Manager</strong></p></li></ol><p>Plugins Manager enables users to automatically install various plugins, eliminating the need for manual installations. The manager saves users from dealing with JAR files manually.</p><p>The steps to install Plugins Manager are as follows:</p><ul><li><p>Go to this link: <a href="https://jmeter-plugins.org/wiki/PluginsManager/" data-card-appearance="inline">https://jmeter-plugins.org/wiki/PluginsManager/</a> </p></li><li><p>Download the Plugins Manager JAR file.</p></li><li><p>Place the JAR file in JMeter’s <code>lib/ext</code> directory.</p></li></ul><ol start="5"><li><p><strong>Install PerfMon Servers Performance Monitoring Plugin</strong></p></li></ol><p>There are two setups needed to monitor server performance in JMeter:</p><ol start="1"><li><p><strong>Server Agent Setup</strong></p></li><li><p><strong>PerfMon Metrics Collector Setup</strong></p></li></ol><p><strong>Server Agent Setup</strong></p><p>JMeter does not collect server health metrics by default (except Tomcat). However, users can leverage the open-source SIGAR library, which should run on each server being monitored.</p><p>Steps:</p><ul><li><p>Download the PerfMon Server Agent from GitHub.</p></li><li><p>Extract it and place it on each server that requires metric gathering (no administrator/root access needed).</p></li><li><p>Navigate to the extracted folder and run:</p><ul><li><p><strong>Windows:</strong> <code>startAgent.bat</code></p></li><li><p><strong>Mac/Linux:</strong> <code>startAgent.sh</code></p></li></ul></li></ul><p>This will start the agent on the default port 4444, displaying logs similar to:</p><ac:structured-macro ac:name="code" ac:schema-version="1" ac:macro-id="5066db26-3bfd-43d2-af6e-b83d3d070f2e"><ac:plain-text-body><![CDATA[INFO 2021-02-06 11:33:00.186 RMI TCP Accept-0: Binding to port 4444  
INFO 2021-02-06 11:33:00.186 RMI TCP Accept-0: Bound to port 4444  
INFO 2021-02-06 11:33:00.186 RMI TCP Accept-0: JP@GC Agent v2.2.3 started  
]]></ac:plain-text-body></ac:structured-macro><p>To change the port, use the command:</p><ac:structured-macro ac:name="code" ac:schema-version="1" ac:macro-id="f3e1e328-2596-47ac-83c6-812631ee78e5"><ac:plain-text-body><![CDATA[startAgent.bat --tcp-port 3450
]]></ac:plain-text-body></ac:structured-macro><ol start="6"><li><p><strong>Install PerfMon Metrics Collector Setup</strong></p></li></ol><ul><li><p>Open the JMeter test plan.</p></li><li><p>Open Plugins Manager.</p></li><li><p>Click <strong>Available Plugins</strong> and search for <code>PerfMon</code>.</p></li><li><p>Install the plugin and restart JMeter.</p></li></ul><p>After installation:</p><ul><li><p>Add the <strong>jp@gc - PerfMon Metrics Collector</strong> by navigating:</p><ul><li><p><strong>Right-click Thread Group</strong> → <strong>Add</strong> → <strong>Listener</strong> → <strong>jp@gc - PerfMon Metrics Collector</strong>.</p></li></ul></li></ul><p><strong>Configuring PerfMon Metrics Collector</strong></p><ul><li><p>Click <strong>Add Row</strong> to specify host, port, and the metrics to collect.</p></li><li><p>Multiple metrics can be added by clicking <strong>Add Row</strong> again.</p></li></ul><p>Here’s the exact extracted text from your image:</p><p><strong>JMeter PerfMon Plugin Configuration Guide</strong></p><p><strong>Testing the Server Agent</strong></p><p>After adding the PerfMon Metrics Collector listener, you can validate whether the Server Agent is receiving commands.</p><p>Steps:</p><ol start="1"><li><p><strong>Open JMeter.</strong></p></li><li><p><strong>Right-click Thread Group</strong> → <strong>Validate</strong> → Click <strong>Validate</strong>.</p></li><li><p>This will send a single test request.</p></li><li><p>Check the <strong>Server Agent Terminal</strong> where it is running. If configured correctly, you should see:</p></li></ol><ac:structured-macro ac:name="code" ac:schema-version="1" ac:macro-id="c1d8ba40-9268-4b3f-861b-fd63ea1e1952"><ac:plain-text-body><![CDATA[INFO 2021-06-02 11:55:12 JVM-8PC-B Received test command  
INFO 2021-06-02 11:55:12 JVM-8PC-B Sending acknowledgment  
]]></ac:plain-text-body></ac:structured-macro><p>This output confirms that the Server Agent is receiving commands successfully.</p><p><strong>Understanding JMeter Components</strong></p><p>JMeter consists of various <strong>Elements</strong> designed for different purposes. Some key components include:</p><ul><li><p><strong>Thread Group</strong> – Defines the number of threads (users) that simulate concurrent requests.</p></li><li><p><strong>Samplers</strong> – Send requests to a server and receive responses.</p></li><li><p><strong>Listeners</strong> – Capture test results, metrics, and graphs.</p></li><li><p><strong>Configuration Elements</strong> – Manage default settings for Samplers, such as HTTP headers.</p></li></ul><ol start="9"><li><p><strong>Thread Group Overview</strong></p></li></ol><p>A <strong>Thread Group</strong> is a collection of <strong>threads</strong>, where each thread represents a virtual user making requests to the application under test.</p><p>Key properties:</p><ul><li><p><strong>Number of Threads</strong> – Simulated users sending requests.</p></li><li><p><strong>Ramp-Up Period</strong> – Time taken to start all threads gradually.</p></li><li><p><strong>Loop Count</strong> – Defines how many times the requests should be executed per thread.</p></li></ul><p>Here’s the exact extracted text from your image:</p><p><strong>JMeter Plugin Components Guide</strong></p><p><strong>Samplers Overview</strong></p><p>Samplers are components that send requests to a server and process responses. JMeter supports testing various protocols, such as HTTP, FTP, JDBC, and more.</p><ul><li><p><strong>FTP Request:</strong> Used for performance testing an FTP server, allowing file downloads and uploads.</p></li><li><p><strong>HTTP Request:</strong> Sends HTTP/HTTPS requests to web servers, simulating browser or API interactions.</p></li><li><p><strong>JDBC Request:</strong> Executes database performance testing using SQL queries.</p></li><li><p><strong>BSF Sampler:</strong> Allows writing custom samplers using a Bean Scripting Framework language.</p></li><li><p><strong>Access Log Sampler:</strong> Reads access logs and generates corresponding HTTP requests.</p></li><li><p><strong>SMTP Sampler:</strong> Sends email messages via the SMTP protocol for performance verification.</p></li></ul><p><strong>Listeners Overview</strong></p><p>Listeners capture and display the results of test executions in various formats, such as graphs, tables, and logs.</p><ul><li><p><strong>Graph Results:</strong> Visualizes server response times in a graph format.</p></li><li><p><strong>View Results Tree:</strong> Displays raw request-response data for analysis.</p></li><li><p><strong>Table Results:</strong> Summarizes test results in a structured table.</p></li><li><p><strong>Log Results:</strong> Records test summaries in a text file for further examination.</p></li></ul><p><strong>Configuration Elements Overview</strong></p><p>Configuration Elements provide default settings and reusable variables for samplers.</p><ul><li><p><strong>User Defined Variables:</strong> Enables parameterization of requests using predefined variables.</p></li><li><p><strong>HTTP Header Manager:</strong> Defines HTTP headers for requests.</p></li><li><p><strong>CSV Data Set Config:</strong> Reads external CSV files for dynamic test data.</p></li><li><p><strong>DNS Cache Manager:</strong> Controls DNS resolution behavior during testing.</p></li><li><p><strong>Java Request Defaults:</strong> Specifies default settings for Java-based samplers.</p></li></ul><p>Here’s the exact extracted text from your image:</p><ol start="7"><li><p><strong>CREATE TEST PLAN</strong></p></li></ol><p>Now that you have understood the elements, you can create your own test plan in JMeter.</p><p>The first step in creating the test plan is:</p><p><strong>ADDING A THREAD GROUP</strong></p><ul><li><p>Open the JMeter window</p></li><li><p>The window is divided into two parts. The left side has all the added elements, while the right side has all the elements&apos; configurations.</p></li><li><p>Right-click on the test plan.</p></li><li><p>Go to <strong>Add → Threads (Users) → Thread Group</strong></p></li></ul><p>Now, once you click on the <strong>Thread Group</strong>, there are three things on the screen that are important concerning the load test:</p><ul><li><p><strong>Number of Threads (Users):</strong><br />This is the number of threads or users JMeter will simulate.<br />Let&apos;s make it <strong>100</strong>.</p></li><li><p><strong>Ramp-Up Period (in seconds):</strong><br />This is the time that JMeter takes before starting the thread over.<br />Let&apos;s keep this as <strong>12</strong>.</p></li><li><p><strong>Loop Count:</strong><br />This is the number of times the test will be executed.<br />And this one, let&apos;s leave it to be <strong>1</strong>.</p></li></ul><p><strong>Thread Group</strong></p><ul><li><p><strong>Name:</strong> Thread Group</p></li><li><p><strong>Comments:</strong></p></li><li><p><strong>Action to be taken after a Sampler error:</strong></p><ul><li><p>Continue</p></li><li><p>Start Next Thread Loop</p></li><li><p>Stop Thread</p></li><li><p>Stop Test</p></li><li><p>Stop Test Now</p></li></ul></li></ul><p><strong>Thread Properties</strong></p><ul><li><p><strong>Number of Threads (Users):</strong> 100</p></li><li><p><strong>Ramp-up Period (Seconds):</strong> 12</p></li><li><p><strong>Loop Count:</strong> 1</p><ul><li><p>Same user on each iteration</p></li><li><p>Specify Thread creation until needed</p></li></ul></li><li><p><strong>Duration (Seconds):</strong></p></li><li><p><strong>Startup delay (Seconds):</strong></p></li></ul><p>The next step is to:</p><p><strong>ADD AN HTTP REQUEST</strong></p><ul><li><p>Right-click on <strong>Test Plan</strong> and again go to <strong>Add</strong></p></li><li><p>In the drop-down, select <strong>Samplers</strong></p></li></ul><p>These are all the types of requests that JMeter can work on.</p><ul><li><p>For now, choose the simplest of them all, the <strong>HTTP Request</strong>.</p></li></ul><p>Here you will have to give the address to some home pages or websites.</p><p>Here’s the exact extracted text from your image:</p><p>Here, you will have to specify the target website or API:</p><ul><li><p><strong>Server Name or IP:</strong> Enter the domain name or IP address of the server.</p></li><li><p><strong>Protocol:</strong> Specify <code>HTTP</code> or <code>HTTPS</code> based on the request type.</p></li><li><p><strong>Port Number:</strong> Define the port on which the server listens.</p></li><li><p><strong>Path:</strong> Provide the request path relative to the server.</p></li></ul><p>Once the HTTP request setup is complete, the next step is executing a test:</p><p><strong>JMeter HTTP Test Execution Guide</strong></p><ol start="8"><li><p><strong>Run Test Plan</strong></p></li></ol><p>Now that the HTTP test setup is complete, the next step is to execute the test and analyze the results.</p><p><strong>Add Listeners</strong></p><p>To determine the results of the test, you need to add listeners.</p><ul><li><p><strong>Right-click on FirstJMeter</strong></p></li><li><p>Navigate to the <strong>Listener</strong> options</p></li></ul><p>JMeter provides various report types for test result visualization.<br />For now, select <strong>View Results Tree</strong>.</p><ol start="8"><li><p><strong>Execute the Test Plan</strong></p></li></ol><ul><li><p>Click the <strong>green run button</strong> to start the test.</p></li><li><p>Observe the test execution and navigate to <strong>View Results in Table</strong>.</p></li></ul><p>If the test was successful, you should see a <strong>green status indicator</strong>, confirming proper request execution.</p><ul><li><p>Then, verify results in <strong>View Results in Tree</strong> for detailed request-response analysis.</p></li></ul><p><strong>JMeter Test Results &amp; Monitoring</strong></p><p>You can see the <strong>green status</strong> that shows that the test was successful.</p><ul><li><p>Then check <strong>View Results in Tree</strong></p></li></ul><p>The <strong>green status</strong> or success indicator can be seen here as well.</p><p>The test execution considers the <strong>number of users</strong>, <strong>ramp-up period</strong>, and <strong>loop count</strong> set up in the first step.</p><p>As seen on the screen, the test is <strong>still running</strong>.</p><ul><li><p>The execution time, number of requests performed, and the success status of each hit to the API are displayed.</p></li></ul><p>For <strong>demonstration purposes</strong>, the test is being executed in <strong>GUI mode</strong>.</p><ul><li><p>In this example, CPU and <strong>memory metrics</strong> are being monitored.</p></li></ul><p>Once the test <strong>runs for a few seconds</strong>, the <strong>listener will plot graphs</strong> based on data collected from the <strong>server agent</strong>.</p><p><strong>Additional Documentation</strong></p><ul><li><p>L&amp;P Inner Sourcing Handover Documentation</p></li><li><p>Load &amp; Performance Sample Test Plan</p></li></ul><p><strong>Troubleshooting</strong></p><ul><li><p><strong>JMeter PerfMon: EXCEPTION_ACCESS_VIOLATION</strong></p></li><li><p><a href="https://stackoverflow.com/questions/55928198/jmeter-perfmon-exception-access-violation" data-card-appearance="inline">https://stackoverflow.com/questions/55928198/jmeter-perfmon-exception-access-violation</a> </p></li><li><p><strong>Solution:</strong> Download the <strong>sigar-amd64-winnt.dll</strong> file and replace it in the <strong>lib</strong> folder.</p></li></ul><p /><p /><p /></body>
  <category>storage-team</category>
  <category>confluence</category>
</page>
