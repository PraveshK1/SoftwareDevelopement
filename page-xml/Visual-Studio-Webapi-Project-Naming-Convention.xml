<?xml version="1.0" standalone="no"?>
<!DOCTYPE page SYSTEM "../../page.dtd">
<page xmlns:ac="http://www.atlassian.com/schema/confluence/4/ac/" xmlns:ri="http://www.atlassian.com/schema/confluence/4/ri/">
  <space>storage</space>
  <title>Visual Studio Webapi Project Naming Convention</title>
  <lower-title>visual studio webapi project naming convention</lower-title>
  <body><hr /><h3>OVERVIEW</h3><p>This page presents the fundamental naming conventions for Visual Studio Web API project classes. Below are examples of different types of class names commonly used in a Web API project developed in Visual Studio (VS) and their respective purposes:</p><table data-table-width="760" data-layout="default" ac:local-id="10952ed0-e192-42dd-89e6-079a2f59de88"><tbody><tr><th><p><strong>CLASS TYPE</strong></p></th><th><p><strong>PURPOSE</strong></p></th><th><p><strong>EXAMPLE NAME</strong></p></th></tr><tr><td><p>Controller Classes</p></td><td><p>Handle incoming HTTP requests, process them, and return appropriate HTTP responses.</p></td><td><p>UsersController</p></td></tr><tr><td><p>Model Classes</p></td><td><p>Represent data entities or objects used within the API, define data structure and properties.</p></td><td><p>UserModel</p></td></tr><tr><td><p>DTO (Data Transfer Object) Classes</p></td><td><p>Transfer data between different layers or components of the application.</p></td><td><p>UserDTO</p></td></tr><tr><td><p>Service Classes</p></td><td><p>Encapsulate functionalities or business logic not directly tied to API endpoints.</p></td><td><p>EmailService</p></td></tr><tr><td><p>Repository Classes</p></td><td><p>Responsible for data access and persistence, provide an abstraction layer for data storage.</p></td><td><p>UserRepository</p></td></tr><tr><td><p>Interface Classes</p></td><td><p>Define contracts for implementing specific behaviors or services.</p></td><td><p>IUserService</p></td></tr><tr><td><p>Helper/Utility Classes</p></td><td><p>Contain reusable methods or functions for specific tasks across the API.</p></td><td><p>ValidationHelper</p></td></tr><tr><td><p>Extension Classes</p></td><td><p>Provide additional methods or functionality to existing types or classes.</p></td><td><p>StringExtensions</p></td></tr><tr><td><p>Configuration Classes</p></td><td><p>Hold settings and configurations required by the API.</p></td><td><p>AppSettings</p></td></tr><tr><td><p>Exception Handling Classes</p></td><td><p>Define custom exception types or handle exceptions raised within the API.</p></td><td><p>ApiException</p></td></tr><tr><td><p>Middleware Classes</p></td><td><p>Handle processing of HTTP requests and responses in the pipeline.</p></td><td><p>AuthenticationMiddleware</p></td></tr><tr><td><p>Filter Classes</p></td><td><p>Apply pre or post-processing logic to API requests or responses.</p></td><td><p>AuthorizationFilter</p></td></tr><tr><td><p>Attribute Classes</p></td><td><p>Annotate or decorate API elements with additional behavior or metadata.</p></td><td><p>AllowAnonymousAttribute</p></td></tr><tr><td><p>Enum Classes</p></td><td><p>Define named values representing a specific domain or state within the API.</p></td><td><p>StatusEnum</p></td></tr><tr><td><p>Custom Package/Library</p></td><td><p>Encapsulate and organize related functionalities into reusable modules.</p></td><td><p>MyCustomLibrary</p></td></tr></tbody></table><p>IntegrationApi/<br />├── Controllers/<br />│   └── UsersController.cs<br />├── Models/<br />│   └── UserModel.cs<br />├── DTOs/<br />│   └── UserDTO.cs<br />├── Services/<br />│   ├── Abstract/<br />│   │   └── IUserService.cs<br />│   └── Concrete/<br />│       └── UserService.cs<br />├── Repositories/<br />│   ├── Abstract/<br />│   │   └── IUserRepository.cs<br />│   └── Concrete/<br />│       └── UserRepository.cs<br />├── Helpers/<br />│   └── ValidationHelper.cs<br />├── Extensions/<br />│   └── StringExtensions.cs<br />├── Configuration/<br />│   └── AppSettings.cs<br />├── Exceptions/<br />│   └── ApiException.cs<br />├── Middleware/<br />│   └── AuthenticationMiddleware.cs<br />├── Filters/<br />│   └── AuthorizationFilter.cs<br />├── Attributes/<br />│   └── AllowAnonymousAttribute.cs<br />├── Enums/<br />│   └── StatusEnum.cs<br />├── Libraries/<br />│   └── MyCustomLibrary.cs<br />├── Data/<br />│   └── AppDbContext.cs<br />├── Program.cs<br />└── IntegrationApi.csproj</p><hr /><h3>Scaffold Project on GitHub</h3><p><a href="https://github.com/PraveshK1/WebapiScaffold.git" data-card-appearance="inline">https://github.com/PraveshK1/WebapiScaffold.git</a> </p></body>
  <category>storage-team</category>
  <category>confluence</category>
</page>
