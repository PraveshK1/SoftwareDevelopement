<?xml version="1.0" standalone="no"?>
<!DOCTYPE page SYSTEM "../../page.dtd">
<page xmlns:ac="http://www.atlassian.com/schema/confluence/4/ac/" xmlns:ri="http://www.atlassian.com/schema/confluence/4/ri/">
  <space>storage</space>
  <title>Integration Architecture</title>
  <lower-title>integration architecture</lower-title>
  <body><ac:structured-macro ac:name="drawio" ac:schema-version="1" data-layout="default" ac:local-id="aab0e552-f376-4d2d-a4f0-1a0e166c0fd9" ac:macro-id="b3a54ac4-d5fd-41f5-b185-cd68a2d2b7e5"><ac:parameter ac:name="mVer">2</ac:parameter><ac:parameter ac:name="zoom">1</ac:parameter><ac:parameter ac:name="simple">0</ac:parameter><ac:parameter ac:name="inComment">0</ac:parameter><ac:parameter ac:name="custContentId">854175</ac:parameter><ac:parameter ac:name="pageId">854071</ac:parameter><ac:parameter ac:name="lbox">1</ac:parameter><ac:parameter ac:name="diagramDisplayName">Integration Achitecture.drawio</ac:parameter><ac:parameter ac:name="contentVer">7</ac:parameter><ac:parameter ac:name="revision">7</ac:parameter><ac:parameter ac:name="baseUrl">https://orignals.atlassian.net/wiki</ac:parameter><ac:parameter ac:name="diagramName">Integration Achitecture.drawio</ac:parameter><ac:parameter ac:name="pCenter">0</ac:parameter><ac:parameter ac:name="width">1384</ac:parameter><ac:parameter ac:name="links" /><ac:parameter ac:name="tbstyle" /><ac:parameter ac:name="height">1101</ac:parameter></ac:structured-macro><h2>Architectural Patterns Used in Design</h2><p>The system uses a combination of well-established patterns designed for scalability, decoupling, and extensibility. Here&apos;s a breakdown of the architectural patterns in use:</p><hr /><h3>1. <strong>Microservices Architecture</strong></h3><p>Each component—such as <em>Data Access WebAPI</em>, <em>Data Manager</em>, <em>Data Watchdog</em>, and <em>Event Service</em>—is encapsulated with specific responsibilities. These are likely deployed independently and interact via lightweight protocols, suggesting a <strong>microservices</strong> approach. This allows updates, scaling, and deployment per service, without impacting others.</p><hr /><h3>2. <strong>Event-Driven Architecture</strong></h3><p>The presence of a <strong>Message Broker</strong> and services reacting to <strong>Real Events</strong> and <strong>Fake Events</strong> indicates strong use of event-driven principles. Components like the <em>Event Service</em> subscribe to or publish messages asynchronously, improving responsiveness and decoupling.</p><hr /><h3>3. <strong>Publisher-Subscriber Pattern</strong></h3><p><em>External Topics Publisher</em> and internal components likely leverage a <strong>Pub-Sub mechanism</strong> through the Message Broker. This enables multiple consumers (internal services or external systems) to independently respond to the same event stream.</p><hr /><h3>4. <strong>Service-Oriented Architecture (SOA)</strong></h3><p>While the system follows microservices, the <em>Data Manager</em> and <em>External Data Access WebAPI</em> show characteristics of <strong>SOA</strong>, where services expose interfaces for use by both internal and external consumers, potentially governed by contracts.</p><hr /><h3>5. <strong>API Gateway / Backend-for-Frontend (BFF)</strong></h3><p>The <em>Data Access WebAPI</em> components appear to function as <strong>gateways</strong> to backend services, acting as a control point between external consumers and the internal integration layer. This centralizes access control, logging, and throttling.</p><hr /><h3>6. <strong>Orchestration Pattern</strong></h3><p>In this role, the <strong>Data Manager</strong> becomes the central coordinator. It manages:</p><ul><li><p><strong>Input acquisition</strong> (pulling or receiving from Data Access Layers or APIs),</p></li><li><p><strong>Transformation or validation</strong> (applying business logic),</p></li><li><p><strong>Output delegation</strong> (distributing results to Event Services, databases, or other consumers).</p></li></ul><p>This fits the <strong>Orchestration</strong> pattern versus <strong>Choreography</strong>, where each component would independently react to events. In orchestration, one component (your Data Manager) drives the entire interaction.</p><hr /><p /><p /><p /></body>
  <category>storage-team</category>
  <category>confluence</category>
</page>
