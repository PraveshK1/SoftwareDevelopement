<?xml version="1.0" standalone="no"?>
<!DOCTYPE page SYSTEM "../../page.dtd">
<page xmlns:ac="http://www.atlassian.com/schema/confluence/4/ac/" xmlns:ri="http://www.atlassian.com/schema/confluence/4/ri/">
  <space>storage</space>
  <title>UML Component Diagram</title>
  <lower-title>uml component diagram</lower-title>
  <body><hr /><p><strong>WHAT IS A UML COMPONENT DIAGRAM?</strong>  <br />UML Component diagrams are used in modeling the physical aspects of object-oriented systems that are used for visualizing, specifying, and documenting component-based systems and also for constructing executable systems through forward and reverse engineering.  <br />Component diagrams are essentially class diagrams that focus on a system’s components that are often used to model the static implementation view of a system.</p><p /><p><strong>Component Diagram Shapes and Symbols</strong></p><p><ac:emoticon ac:name="blue-star" ac:emoji-shortname=":warning:" ac:emoji-id="26a0" ac:emoji-fallback="⚠️" /> Please note diagrams range from simple and high level to detailed and complex. Either way you’ll want to familiarize yourself with the appropriate UML Symbols.</p><p /><p>The following are the shape types that you will commonly encounter when reading and building component diagrams:</p><ac:image ac:align="center" ac:layout="center" ac:original-height="962" ac:original-width="572" ac:custom-width="true" ac:alt="Component Diagram Symbols.png" ac:width="572"><ri:attachment ri:filename="Component Diagram Symbols.png" ri:version-at-save="1" /></ac:image><p /><hr /><h2>🧩 UML Component Diagram Reference – Editable Template</h2><h3>📘 How to Use Component Shapes and Symbols</h3><p>There are a few popular ways to define a component&apos;s name compartment. You must always include the keyword <code>&lt;&lt;component&gt;&gt;</code> and/or the component symbol. This is important because a simple rectangle with just a name is reserved for classifiers (i.e., class elements).</p><p>Just like class notation, components may optionally list interfaces, similar to class methods and attributes. Interfaces represent the external communication points of the component with other parts of the system.</p><p>Alternatively, interfaces can also be shown visually by extending symbols from the component box. Here are the most frequently used symbols:</p><ul><li><p><strong>Provided Interfaces (Lollipop)</strong>:  </p><ac:image ac:align="center" ac:layout="center" ac:original-height="55" ac:original-width="109" ac:custom-width="true" ac:alt="image-20250614-075947.png" ac:width="109"><ri:attachment ri:filename="image-20250614-075947.png" ri:version-at-save="1" /></ac:image><p><br />A straight line from the component box with an attached open circle. This denotes an interface the component offers to others.</p></li></ul><p> </p><p /><ul><li><p><strong>Required Interfaces (Socket)</strong>:  </p></li><li><ac:image ac:align="center" ac:layout="center" ac:original-height="59" ac:original-width="100" ac:custom-width="true" ac:alt="image-20250614-080111.png" ac:width="100"><ri:attachment ri:filename="image-20250614-080111.png" ri:version-at-save="1" /></ac:image></li></ul><p><br />A straight line with a half-circle attached. It indicates the component needs an interface in order to function correctly.</p><p /><ac:image ac:align="center" ac:layout="center" ac:original-height="203" ac:original-width="515" ac:custom-width="true" ac:alt="image-20250614-080200.png" ac:width="515"><ri:attachment ri:filename="image-20250614-080200.png" ri:version-at-save="1" /></ac:image><p /><hr /><h3>🔳 Port</h3><p>Ports are shown as small squares along the edge of the system or a component. They help expose required and provided interfaces from a component.</p><ac:image ac:align="center" ac:layout="center" ac:original-height="161" ac:original-width="526" ac:custom-width="true" ac:alt="image-20250614-080322.png" ac:width="526"><ri:attachment ri:filename="image-20250614-080322.png" ri:version-at-save="1" /></ac:image><p /><hr /><h3>🏗️ Building a Component Diagram</h3><p>In UML, a component diagram visually illustrates how software system parts relate to one another. A component diagram should communicate:</p><ul><li><p>The scope of your system  </p></li><li><p>The structure of your system  </p></li><li><p>The goals your system helps users (human or non-human actors) achieve  </p></li></ul><hr /><h3>⚙️ Overall Structure for an API Project</h3><ac:image ac:align="center" ac:layout="center" ac:original-height="299" ac:original-width="873" ac:custom-width="true" ac:alt="image-20250614-080359.png" ac:width="760"><ri:attachment ri:filename="image-20250614-080359.png" ri:version-at-save="1" /></ac:image><p>This diagram illustrates the general structure of a typical WebAPI project. Actual implementations may vary depending on specific architecture or requirements.</p><hr /><h3>🧪 Example Component Diagram</h3><ac:structured-macro ac:name="drawio" ac:schema-version="1" data-layout="default" ac:local-id="075140aa-7e8e-40cd-8c26-a22642fbe5ae" ac:macro-id="34a0ba3d-4f21-4d12-8ff8-65faab69f7ab"><ac:parameter ac:name="mVer">2</ac:parameter><ac:parameter ac:name="simple">0</ac:parameter><ac:parameter ac:name="zoom">1</ac:parameter><ac:parameter ac:name="inComment">0</ac:parameter><ac:parameter ac:name="pageId">753824</ac:parameter><ac:parameter ac:name="custContentId">983343</ac:parameter><ac:parameter ac:name="diagramDisplayName">UML Component Example.drawio</ac:parameter><ac:parameter ac:name="lbox">1</ac:parameter><ac:parameter ac:name="contentVer">2</ac:parameter><ac:parameter ac:name="revision">2</ac:parameter><ac:parameter ac:name="baseUrl">https://orignals.atlassian.net/wiki</ac:parameter><ac:parameter ac:name="diagramName">UML Component Example.drawio</ac:parameter><ac:parameter ac:name="pCenter">0</ac:parameter><ac:parameter ac:name="width">1425.9999999999998</ac:parameter><ac:parameter ac:name="links" /><ac:parameter ac:name="tbstyle" /><ac:parameter ac:name="height">1461</ac:parameter></ac:structured-macro><p>Use this template as a starting point to create your own system design.</p><hr /><h3>📚 References</h3><ul><li><p>UML 2 Component Diagrams: An Agile Introduction (<a href="http://agilemodeling.com" data-card-appearance="inline">http://agilemodeling.com</a> )  </p></li><li><p>“Naming Classes - How to avoid calling everything a <code>SomethingManager</code>?” – Stack Overflow  </p></li><li><p>“What is Component Diagram?” – <a href="http://visual-paradigm.com" data-card-appearance="inline">http://visual-paradigm.com</a>   </p></li></ul><hr /><p /><p /></body>
  <category>storage-team</category>
  <category>confluence</category>
</page>
